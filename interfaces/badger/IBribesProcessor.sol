// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

interface IBribesProcessor {
    event BribeEmission(
        address indexed token,
        address indexed recipient,
        uint256 amount
    );
    event PerformanceFeeGovernance(address indexed token, uint256 amount);
    event SentBribeToGovernance(address indexed token, uint256 amount);
    event SentBribeToTree(address indexed token, uint256 amount);

    function BADGER() external view returns (address);

    function BADGER_SHARE() external view returns (uint256);

    function BADGER_TREE() external view returns (address);

    function BALANCE_ERC20() external view returns (bytes32);

    function BVE_CVX() external view returns (address);

    function B_BVECVX_CVX() external view returns (address);

    function CVX() external view returns (address);

    function CVX_BVE_CVX_CURVE() external view returns (address);

    function DEV_MULTI() external view returns (address);

    function HARVEST_FORWARDER() external view returns (address);

    function KIND_SELL() external view returns (bytes32);

    function LP_FEE() external view returns (uint256);

    function MAX_BPS() external view returns (uint256);

    function MAX_MANAGER_IDLE_TIME() external view returns (uint256);

    function OPS_FEE() external view returns (uint256);

    function RELAYER() external view returns (address);

    function SETTLEMENT() external view returns (address);

    function STRATEGY() external view returns (address);

    function TREASURY() external view returns (address);

    function WETH() external view returns (address);

    function checkCowswapOrder(
        CowSwapSeller.Data memory orderData,
        bytes memory orderUid
    ) external view returns (bool);

    function domainSeparator() external view returns (bytes32);

    function emitBadger() external;

    function getHash(CowSwapSeller.Data memory order, bytes32 separator)
        external
        pure
        returns (bytes32 orderDigest);

    function getOrderID(CowSwapSeller.Data memory orderData)
        external
        view
        returns (bytes memory);

    function lastBribeAction() external view returns (uint256);

    function manager() external view returns (address);

    function notifyNewRound() external;

    function packOrderUidParams(
        bytes memory orderUid,
        bytes32 orderDigest,
        address owner,
        uint32 validTo
    ) external pure;

    function pricer() external view returns (address);

    function ragequit(address token, bool sendToGovernance) external;

    function sellBribeForWeth(
        CowSwapSeller.Data memory orderData,
        bytes memory orderUid
    ) external;

    function setCustomAllowance(address token, uint256 newAllowance) external;

    function setManager(address newManager) external;

    function setPricer(address newPricer) external;

    function swapCVXTobveCVXAndEmit() external;

    function swapWethForBadger(
        CowSwapSeller.Data memory orderData,
        bytes memory orderUid
    ) external;

    function swapWethForCVX(
        CowSwapSeller.Data memory orderData,
        bytes memory orderUid
    ) external;
}

interface CowSwapSeller {
    struct Data {
        address sellToken;
        address buyToken;
        address receiver;
        uint256 sellAmount;
        uint256 buyAmount;
        uint32 validTo;
        bytes32 appData;
        uint256 feeAmount;
        bytes32 kind;
        bool partiallyFillable;
        bytes32 sellTokenBalance;
        bytes32 buyTokenBalance;
    }
}
