// SPDX-License-Identifier: MIT
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!
pragma solidity ^0.6.12;

interface IStabilizeStrategyDiggV1 {
    event Harvest(uint256 harvested, uint256 indexed blockNumber);
    event NoTrade(uint256 blocknumber);
    event Paused(address account);
    event SetController(address controller);
    event SetGovernance(address governance);
    event SetPerformanceFeeGovernance(uint256 performanceFeeGovernance);
    event SetPerformanceFeeStrategist(uint256 performanceFeeStrategist);
    event SetStrategist(address strategist);
    event SetWithdrawalFee(uint256 withdrawalFee);
    event Tend(uint256 tended);
    event TradeState(
        uint256 soldAmountNormalized,
        int256 percentPriceChange,
        uint256 soldPercent,
        uint256 oldSupply,
        uint256 newSupply,
        uint256 blocknumber
    );
    event Unpaused(address account);
    event Withdraw(uint256 amount);
    event WithdrawAll(uint256 balance);
    event WithdrawOther(address token, uint256 amount);

    function MAX_FEE() external view returns (uint256);

    function __BaseStrategy_init(
        address _governance,
        address _strategist,
        address _controller,
        address _keeper,
        address _guardian
    ) external;

    function balanceOf() external view returns (uint256);

    function balanceOfPool() external view returns (uint256);

    function balanceOfWant() external view returns (uint256);

    function baseStrategyVersion() external view returns (string memory);

    function controller() external view returns (address);

    function deposit() external;

    function diggExchangeTreasury() external view returns (address);

    function diggInExpansion() external view returns (bool);

    function diggSupplyChangeFactor() external view returns (uint256);

    function executeTradeBatch() external;

    function getDiggPrice() external view returns (uint256);

    function getDiggUSDPrice() external view returns (uint256);

    function getName() external pure returns (string memory);

    function getProtectedTokens() external view returns (address[] memory);

    function getTokenAddress(uint256 _id) external view returns (address);

    function getWBTCUSDPrice() external view returns (uint256);

    function governance() external view returns (address);

    function governancePullSomeCollateral(uint256 _amount) external;

    function guardian() external view returns (address);

    function initialize(
        address _governance,
        address _strategist,
        address _controller,
        address _keeper,
        address _guardian,
        uint256 _lockedUntil,
        address[2] calldata _vaultConfig,
        uint256[4] calldata _feeConfig
    ) external;

    function isTendable() external view returns (bool);

    function keeper() external view returns (address);

    function lastDiggPrice() external view returns (uint256);

    function lastDiggTotalSupply() external view returns (uint256);

    function maxGainedDiggSellPercent() external view returns (uint256);

    function maxOracleLag() external view returns (uint256);

    function maxWBTCSellPercent() external view returns (uint256);

    function pause() external;

    function paused() external view returns (bool);

    function performanceFeeGovernance() external view returns (uint256);

    function performanceFeeStrategist() external view returns (uint256);

    function rebalance() external;

    function setController(address _controller) external;

    function setDiggExchangeTreasury(address _treasury) external;

    function setGovernance(address _governance) external;

    function setGuardian(address _guardian) external;

    function setKeeper(address _keeper) external;

    function setOracleLagTime(uint256 _time) external;

    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance)
        external;

    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist)
        external;

    function setSellFactorsAndPercents(
        uint256 _dFactor,
        uint256 _wFactor,
        uint256 _wAmplifier,
        uint256 _mPDigg,
        uint256 _mPWBTC
    ) external;

    function setStabilizeFee(uint256 _fee) external;

    function setStabilizeVault(address _vault) external;

    function setStrategist(address _strategist) external;

    function setTradingBatchSize(uint256 _size) external;

    function setWithdrawalFee(uint256 _withdrawalFee) external;

    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external;

    function stabilizeFee() external view returns (uint256);

    function stabilizeVault() external view returns (address);

    function strategist() external view returns (address);

    function strategyLockedUntil() external view returns (uint256);

    function tradeAmountLeft() external view returns (uint256);

    function tradeBatchSize() external view returns (uint256);

    function uniswap() external view returns (address);

    function unpause() external;

    function version() external pure returns (string memory);

    function want() external view returns (address);

    function wbtcSellAmplificationFactor() external view returns (uint256);

    function wbtcSupplyChangeFactor() external view returns (uint256);

    function withdraw(uint256 _amount) external;

    function withdrawAll() external returns (uint256 balance);

    function withdrawOther(address _asset) external returns (uint256 balance);

    function withdrawalFee() external view returns (uint256);

    function withdrawalMaxDeviationThreshold() external view returns (uint256);
}
